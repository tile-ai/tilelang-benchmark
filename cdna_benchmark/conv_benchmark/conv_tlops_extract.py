import re

shapes=[
    # [1, 512, 7, 7, 2048, 1, 1, 1, 0],
    # [1, 512, 14, 14, 512, 3, 2, 1, 1],
    # [1, 1024, 14, 14, 512, 1, 1, 1, 0],
    # [1, 256, 14, 14, 1024, 1, 1, 1, 0],
    # [1, 256, 28, 28, 256, 3, 2, 1, 1],
    # [1, 512, 28, 28, 256, 1, 1, 1, 0],
    # [1, 128, 28, 28, 512, 1, 1, 1, 0],
    # [1, 256, 56, 56, 128, 1, 1, 1, 0],
    # [1, 64, 56, 56, 256, 1, 1, 1, 0],
    # [1, 64, 56, 56, 64, 3, 1, 1, 1],
    # [1, 64, 56, 56, 64, 1, 1, 1, 0],
    # [1, 256, 56, 56, 64, 1, 1, 1, 0],
    # [1, 256, 56, 56, 512, 1, 2, 1, 0],
    # [1, 128, 28, 28, 128, 3, 1, 1, 1],
    # [1, 512, 28, 28, 128, 1, 1, 1, 0],
    # [1, 512, 28, 28, 1024, 1, 2, 1, 0],
    # [1, 256, 14, 14, 256, 3, 1, 1, 1],
    # [1, 1024, 14, 14, 256, 1, 1, 1, 0],
    # [1, 1024, 14, 14, 2048, 1, 2, 1, 0],
    # [1, 512, 7, 7, 512, 3, 1, 1, 1],
    # [1, 2048, 7, 7, 512, 1, 1, 1, 0],
    # [1, 128, 56, 56, 128, 3, 2, 1, 1],
    # [1, 3, 224, 224, 64, 7, 2, 1, 3],
    # [32, 512, 7, 7, 2048, 1, 1, 1, 0],
    # [32, 512, 14, 14, 512, 3, 2, 1, 1],
    # [32, 1024, 14, 14, 512, 1, 1, 1, 0],
    # [32, 256, 14, 14, 1024, 1, 1, 1, 0],
    # [32, 256, 28, 28, 256, 3, 2, 1, 1],
    # [32, 512, 28, 28, 256, 1, 1, 1, 0],
    # [32, 128, 28, 28, 512, 1, 1, 1, 0],
    # [32, 256, 56, 56, 128, 1, 1, 1, 0],
    # [32, 64, 56, 56, 256, 1, 1, 1, 0],
    # [32, 64, 56, 56, 64, 3, 1, 1, 1],
    # [32, 64, 56, 56, 64, 1, 1, 1, 0],
    # [32, 256, 56, 56, 64, 1, 1, 1, 0],
    # [32, 256, 56, 56, 512, 1, 2, 1, 0],
    # [32, 128, 28, 28, 128, 3, 1, 1, 1],
    # [32, 512, 28, 28, 128, 1, 1, 1, 0],
    # [32, 512, 28, 28, 1024, 1, 2, 1, 0],
    # [32, 256, 14, 14, 256, 3, 1, 1, 1],
    # [32, 1024, 14, 14, 256, 1, 1, 1, 0],
    # [32, 1024, 14, 14, 2048, 1, 2, 1, 0],
    # [32, 512, 7, 7, 512, 3, 1, 1, 1],
    # [32, 2048, 7, 7, 512, 1, 1, 1, 0],
    # [32, 128, 56, 56, 128, 3, 2, 1, 1],
    # [32, 3, 224, 224, 64, 7, 2, 1, 3],   
    # [64, 512, 7, 7, 2048, 1, 1, 1, 0],
    # [64, 512, 14, 14, 512, 3, 2, 1, 1],
    # [64, 1024, 14, 14, 512, 1, 1, 1, 0],
    # [64, 256, 14, 14, 1024, 1, 1, 1, 0],
    # [64, 256, 28, 28, 256, 3, 2, 1, 1],
    # [64, 512, 28, 28, 256, 1, 1, 1, 0],
    # [64, 128, 28, 28, 512, 1, 1, 1, 0],
    # [64, 256, 56, 56, 128, 1, 1, 1, 0],
    # [64, 64, 56, 56, 256, 1, 1, 1, 0],
    # [64, 64, 56, 56, 64, 3, 1, 1, 1],
    # [64, 64, 56, 56, 64, 1, 1, 1, 0],
    # [64, 256, 56, 56, 64, 1, 1, 1, 0],
    # [64, 256, 56, 56, 512, 1, 2, 1, 0],
    # [64, 128, 28, 28, 128, 3, 1, 1, 1],
    # [64, 512, 28, 28, 128, 1, 1, 1, 0],
    # [64, 512, 28, 28, 1024, 1, 2, 1, 0],
    # [64, 256, 14, 14, 256, 3, 1, 1, 1],
    # [64, 1024, 14, 14, 256, 1, 1, 1, 0],
    # [64, 1024, 14, 14, 2048, 1, 2, 1, 0],
    # [64, 512, 7, 7, 512, 3, 1, 1, 1],
    # [64, 2048, 7, 7, 512, 1, 1, 1, 0],
    # [64, 128, 56, 56, 128, 3, 2, 1, 1],
    # [64, 3, 224, 224, 64, 7, 2, 1, 3],   
    # [128, 512, 7, 7, 2048, 1, 1, 1, 0],
    # [128, 512, 14, 14, 512, 3, 2, 1, 1],
    # [128, 1024, 14, 14, 512, 1, 1, 1, 0],
    # [128, 256, 14, 14, 1024, 1, 1, 1, 0],
    # [128, 256, 28, 28, 256, 3, 2, 1, 1],
    # [128, 512, 28, 28, 256, 1, 1, 1, 0],
    # [128, 128, 28, 28, 512, 1, 1, 1, 0],
    # [128, 256, 56, 56, 128, 1, 1, 1, 0],
    # [128, 64, 56, 56, 256, 1, 1, 1, 0],
    # [128, 64, 56, 56, 64, 3, 1, 1, 1],
    # [128, 64, 56, 56, 64, 1, 1, 1, 0],
    # [128, 256, 56, 56, 64, 1, 1, 1, 0],
    # [128, 256, 56, 56, 512, 1, 2, 1, 0],
    # [128, 128, 28, 28, 128, 3, 1, 1, 1],
    # [128, 512, 28, 28, 128, 1, 1, 1, 0],
    # [128, 512, 28, 28, 1024, 1, 2, 1, 0],
    # [128, 256, 14, 14, 256, 3, 1, 1, 1],
    # [128, 1024, 14, 14, 256, 1, 1, 1, 0],
    # [128, 1024, 14, 14, 2048, 1, 2, 1, 0],
    # [128, 512, 7, 7, 512, 3, 1, 1, 1],
    # [128, 2048, 7, 7, 512, 1, 1, 1, 0],
    # [128, 128, 56, 56, 128, 3, 2, 1, 1],
    # [128, 3, 224, 224, 64, 7, 2, 1, 3],    
    
    # Unet
    [1, 3, 224, 224, 64, 3, 1, 1, 1],
    [1, 64, 224, 224, 64, 3, 1, 1, 1],
    [1, 64, 112, 112, 128, 3, 1, 1, 1],
    [1, 128, 112, 112, 128, 3, 1, 1, 1],
    [1, 128, 56, 56, 256, 3, 1, 1, 1],
    [1, 256, 56, 56, 256, 3, 1, 1, 1],
    [1, 256, 28, 28, 512, 3, 1, 1, 1],
    [1, 512, 28, 28, 512, 3, 1, 1, 1],
    [1, 512, 14, 14, 1024, 3, 1, 1, 1],
    [1, 1024, 14, 14, 1024, 3, 1, 1, 1],
    [1, 1024, 28, 28, 512, 3, 1, 1, 1],
    [1, 128, 224, 224, 64, 3, 1, 1, 1],
    [1, 64, 224, 224, 64, 1, 1, 1, 0],
    [32, 3, 224, 224, 64, 3, 1, 1, 1],
    [32, 64, 224, 224, 64, 3, 1, 1, 1],
    [32, 64, 112, 112, 128, 3, 1, 1, 1],
    [32, 128, 112, 112, 128, 3, 1, 1, 1],
    [32, 128, 56, 56, 256, 3, 1, 1, 1],
    [32, 256, 56, 56, 256, 3, 1, 1, 1],
    [32, 256, 28, 28, 512, 3, 1, 1, 1],
    [32, 512, 28, 28, 512, 3, 1, 1, 1],
    [32, 512, 14, 14, 1024, 3, 1, 1, 1],
    [32, 1024, 14, 14, 1024, 3, 1, 1, 1],
    [32, 1024, 28, 28, 512, 3, 1, 1, 1],
    [32, 128, 224, 224, 64, 3, 1, 1, 1],
    [32, 64, 224, 224, 64, 1, 1, 1, 0],
    [64, 3, 224, 224, 64, 3, 1, 1, 1],
    [64, 64, 224, 224, 64, 3, 1, 1, 1],
    [64, 64, 112, 112, 128, 3, 1, 1, 1],
    [64, 128, 112, 112, 128, 3, 1, 1, 1],
    [64, 128, 56, 56, 256, 3, 1, 1, 1],
    [64, 256, 56, 56, 256, 3, 1, 1, 1],
    [64, 256, 28, 28, 512, 3, 1, 1, 1],
    [64, 512, 28, 28, 512, 3, 1, 1, 1],
    [64, 512, 14, 14, 1024, 3, 1, 1, 1],
    [64, 1024, 14, 14, 1024, 3, 1, 1, 1],
    [64, 1024, 28, 28, 512, 3, 1, 1, 1],
    [64, 128, 224, 224, 64, 3, 1, 1, 1],
    [64, 64, 224, 224, 64, 1, 1, 1, 0],
    [128, 3, 224, 224, 64, 3, 1, 1, 1],
    [128, 64, 224, 224, 64, 3, 1, 1, 1],
    [128, 64, 112, 112, 128, 3, 1, 1, 1],
    [128, 128, 112, 112, 128, 3, 1, 1, 1],
    [128, 128, 56, 56, 256, 3, 1, 1, 1],
    [128, 256, 56, 56, 256, 3, 1, 1, 1],
    [128, 256, 28, 28, 512, 3, 1, 1, 1],
    [128, 512, 28, 28, 512, 3, 1, 1, 1],
    [128, 512, 14, 14, 1024, 3, 1, 1, 1],
    [128, 1024, 14, 14, 1024, 3, 1, 1, 1],
    [128, 1024, 28, 28, 512, 3, 1, 1, 1],
    [128, 128, 224, 224, 64, 3, 1, 1, 1],
    [128, 64, 224, 224, 64, 1, 1, 1, 0],
]


def extract_tflops(data):
    # Use regular expressions to match Best TFlops and Ref TFlops
    best_tflops_pattern = r"Best TFlops:\s*([\d\.]+)"
    ref_tflops_pattern = r"Ref TFlops:\s*([\d\.]+)"

    # Search for matches in the input string
    best_tflops_match = re.search(best_tflops_pattern, data)
    ref_tflops_match = re.search(ref_tflops_pattern, data)

    # Convert the extracted values to float
    best_tflops = float(best_tflops_match.group(1)) if best_tflops_match else None
    ref_tflops = float(ref_tflops_match.group(1)) if ref_tflops_match else None

    return best_tflops, ref_tflops

id = 0
for n, c, h, w, f, k, s, d, p in shapes:
    log_name = f"./logs/{id}.conv_{n}_{c}_{h}_{w}_{f}_{k}_{s}_{d}_{p}.log"
    id += 1
    with open(log_name, "r") as f:
        data = f.read()
        best_tflops, ref_tflops = extract_tflops(data)
    print(best_tflops)